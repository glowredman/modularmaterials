package glowredman.modularmaterials.util;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import glowredman.modularmaterials.Main;
import glowredman.modularmaterials.information.PropertiesMaterials;
import glowredman.modularmaterials.information.Reference;
import glowredman.modularmaterials.json.JItem;
import glowredman.modularmaterials.json.JMaterial;
import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
import net.minecraftforge.fml.relauncher.Side;
import net.minecraftforge.fml.relauncher.SideOnly;

public class FileHandler {
	
	private static long lineCount = 0;
	private static long modelFileCount = 0;
	private static String assets = "/" + Reference.MODID + "/assets/" + Reference.MODID;
	private static List<String> resourceLocations = new ArrayList<String>();
	
	public static void createLangFile(FMLPreInitializationEvent event) {
		
		assets = event.getModConfigurationDirectory().getPath() + assets;
		
		if (Reference.dumpLang) {
			
			File dir = new File(assets + "/lang");
			File file = new File(assets + "/lang", Reference.LANGFILENAME);
			long time = System.nanoTime();
			
			try {
				
				dir.mkdirs();
				
				if (file.exists()) {file.delete();}
				BufferedWriter writer = new BufferedWriter(new FileWriter(file));
				
				//header
				writer.write("# automaticly generated by " + Reference.MODNAME);
				writer.newLine();
				
				//blocks
				newParagraph(writer, "BLOCKS");
				translation(writer, "tile." + Reference.MODID + ".block", "Block");
				writer.newLine();
				
				//ingots
				newParagraph(writer, "INGOTS");
				translation(writer, "item." + Reference.MODID + ".meta.ingot", "Ingot");
				writer.newLine();
				
				//plates
				newParagraph(writer, "PLATES");
				translation(writer, "item." + Reference.MODID + ".meta.plate", "Plate");
				writer.newLine();
				
				//misc items
				newParagraph(writer, "MISC ITEMS");
				for (JItem item : Reference.itemList.getItems()) {
					writer.write("item." + Reference.MODID + ".misc." + item.getName().getText().replace(' ', '_') + ".name=" + item.getName().getText());
					lineCount++;
					writer.newLine();
				}
				writer.newLine();
				
				//liquid
				newParagraph(writer, "LIQUIDS");
				translation2(writer, "fluid." + Reference.MODID + ".liquid_", "Liquid");
				writer.newLine();
				
				//generic fluids
				newParagraph(writer, "FLUIDS");
				translation2(writer, "fluid." + Reference.MODID + ".");
				writer.newLine();
				
				//gases
				newParagraph(writer, "GASES");
				translation2(writer, "fluid." + Reference.MODID + ".gaseous_", "Gaseous");
				writer.newLine();
				
				writer.close();
				
				Main.logger.info("Created \"" + Reference.LANGFILENAME + "\" with " + lineCount + " entries. Took " + MiscUtils.timer(time));
				
			} catch (Exception e) {
				Main.logger.error("An error occured while creating \"" + file.getPath() + "\"! (" + e + ")");
			}
			
		}
		
	}
	
	@SideOnly(Side.CLIENT)
	public static void createModelFiles(FMLPreInitializationEvent event) {
		if (Reference.createModelFiles) {
			
			long time = System.nanoTime();
			
			//search for all different iconSets and put them into 'resourceLocations'
			for (JMaterial material : Reference.materialList.getMaterials()) {
				if (!material.isDisabled() && !resourceLocations.contains(material.getTextureSet())) {
					resourceLocations.add(material.getTextureSet());
				}
			}
			for (JItem item : Reference.itemList.getItems()) {
				if (!item.isDisabled() && !item.usesCustomTexture() && !resourceLocations.contains(item.getIconSet())) {
					resourceLocations.add(item.getIconSet());
				}
			}
			
			//create all model files using 'resourceLocations'
			
			//ingots
			createMetaModelFiles("ingot");
			//plates
			createMetaModelFiles("plate");
			
			//do the same for all miscItems
			resourceLocations.clear();
			for (JItem item : Reference.itemList.getItems()) {
				if (!item.isDisabled() && !resourceLocations.contains(item.getTexture()) && item.usesCustomTexture()) {
					resourceLocations.add(item.getTexture());
				}
			}
			for (String s : resourceLocations) {
				File file = new File(assets + "/models/item/" + s + ".json");
				boolean useCubeModel = false;
				if (s.contains("cube:")) {
					useCubeModel=true;
					s = s.substring(s.indexOf(':') + 1);
				}
				try {
					//create folder structure
					if (s.contains("/")) {
						File dir = new File(assets + "/models/item/" + s.substring(0, s.lastIndexOf('/')));
						dir.mkdirs();
					} else {
						File dir = new File(assets + "/models/item");
						dir.mkdirs();
					}
					//create model file
					if (file.exists()) {file.delete();}
					BufferedWriter writer = new BufferedWriter(new FileWriter(file));
					writer.write("{");
					writer.newLine();
					if (useCubeModel) {
						writer.write("\t\"parent\": \"block/cube_all\",");
					} else {
						writer.write("\t\"parent\": \"item/generated\",");
					}
					writer.newLine();
					writer.write("\t\"textures\": {");
					writer.newLine();
					if (useCubeModel) {
						writer.write("\t\t\"all\": \"" + Reference.MODID + ":items/" + s + '"');
					} else {
						writer.write("\t\t\"layer0\": \"" + Reference.MODID + ":items/" + s + '"');
					}
					writer.newLine();
					writer.write("\t}");
					writer.newLine();
					writer.write("}");
					writer.close();
					modelFileCount++;
				} catch (Exception e) {
					Main.logger.error("An error occured while creating \"" + file.getPath() + "\"! (" + e + ")");
				}
			}
			Main.logger.info("Created " + modelFileCount + " model files. Took " + MiscUtils.timer(time));
		}
	}
	
	private static void createMetaModelFiles(String type) {
		for (String s : resourceLocations) {
			File dir = new File(assets + "/models/item/" + type);
			File file = new File(assets + "/models/item/" + type, s + ".json");
			try {
				//create folder structure
				dir.mkdirs();
				//create model file
				if (file.exists()) {file.delete();}
				BufferedWriter writer = new BufferedWriter(new FileWriter(file));
				writer.write("{");
				writer.newLine();
				writer.write("\t\"parent\": \"item/generated\",");
				writer.newLine();
				writer.write("\t\"textures\": {");
				writer.newLine();
				writer.write("\t\t\"layer0\": \"" + Reference.MODID + ":items/" + s + "/" + type + "\",");
				writer.newLine();
				writer.write("\t\t\"layer1\": \"" + Reference.MODID + ":items/" + s + "/" + type + "_overlay\"");
				writer.newLine();
				writer.write("\t}");
				writer.newLine();
				writer.write("}");
				writer.close();
				modelFileCount++;
			} catch (Exception e) {
				Main.logger.error("An error occured while creating \"" + file.getPath() + "\"! (" + e + ")");
			}
		}
	}
	
	static void translation2(BufferedWriter writer, String prefix, String typeName) throws IOException {
		for (JMaterial material : Reference.materialList.getMaterials()) {
			writer.write(prefix + material.getName().getText().replace(' ', '_').toLowerCase() + ".name=" + typeName + ' ' + material.getName().getText());
			lineCount++;
			writer.newLine();
		}
	}
	
	static void translation2(BufferedWriter writer, String prefix) throws IOException {
		for (JMaterial material : Reference.materialList.getMaterials()) {
			if (material.getState().contentEquals(PropertiesMaterials.S1)) {
				writer.write(prefix + material.getName().getText().replace(' ', '_').toLowerCase() + ".name=Molten " + material.getName().getText());
			} else {
				writer.write(prefix + material.getName().getText().replace(' ', '_').toLowerCase() + ".name=" + material.getName().getText());
			}
			lineCount++;
			writer.newLine();
		}
	}
	
	static void translation(BufferedWriter writer, String prefix, String typeName) throws IOException {
		for (JMaterial material : Reference.materialList.getMaterials()) {
			writer.write(prefix + material.getName().getText().replace(' ', '_') + ".name=" + material.getName().getText() + ' ' + typeName);
			lineCount++;
			writer.newLine();
		}
	}
	
	static void newParagraph(BufferedWriter writer, String header) throws IOException {
		writer.newLine();
		writer.newLine();
		writer.write("#  -----  " + header + "  -----");
		writer.newLine();
		writer.newLine();
		
	}
}
